digraph cluster {
	graph [label=test]
	1 [label="MAINLINE .
 
"]
	2 [label="SET LMAINS-OK TO TRUE
"]
	3 [label="MOVE LMAIN-MESSAGE-LEVEL TO LLOG-LEVEL OF PM-S
"]
	4 [label="MOVE LMAIN-EXTRA-DG TO DG-S
"]
	5 [label="MOVE LMAIN-EXTRA-TG TO TG-S
"]
	6 [label="MOVE LMAIN-EXTRA-TP TO TP-S
"]
	7 [label="MOVE LMAIN-EXTRA-PM TO PM-S
"]
	8 [label="MOVE PM-S TO PUT-MESSAGE-LS OF DG-S
"]
	9 [label="MOVE PM-S TO PUT-MESSAGE-LS OF TG-S
"]
	10 [label="MOVE PM-S TO PUT-MESSAGE-LS OF TP-S
"]
	11 [label="PERFORM CHECK-INPUT
"]
	13 [label="MOVE WS-PUT-MESSAGE TO PUT-MESSAGE OF DG-S PUT-MESSAGE OF TG-S PUT-MESSAGE OF TP-S
"]
	58 [label="MOVE 'Starting process' TO LTEXT OF PM-S
"]
	59 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	60 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	61 [label="PERFORM MAIN-ACTION
"]
	63 [label="MOVE 'Ending process' TO LTEXT OF PM-S
"]
	634 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	635 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	636 [label="PERFORM CLOSE-STREAMS
"]
	638 [label=GOBACK
]
	636 -> 638 [label="perform-exit"]
	93 [label="CLOSE-STREAMS .
 
"]
	94 [label="MOVE 'Closing streams' TO LTEXT OF PM-S
"]
	95 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	96 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	97 [label="MOVE 'Closing Output' TO LTEXT OF PM-S
"]
	98 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	99 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	100 [label="MOVE 'C' TO LXPS-CFILE OF TP-S
"]
	101 [label="PERFORM CALL-TEXT-PUT
"]
	103 [label="MOVE 'Closing Input' TO LTEXT OF PM-S
"]
	127 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	128 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	129 [label="MOVE 'C' TO LXGS-CFILE OF TG-S
"]
	130 [label="PERFORM CALL-TEXT-GET
"]
	132 [label="MOVE 'Closing Log' TO LTEXT OF PM-S
"]
	157 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	158 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	159 [label="MOVE 'C' TO CFILE OF PM-S
"]
	160 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	159 -> 160 [label="sequential next"]
	158 -> 159 [label="sequential next"]
	157 -> 158 [label="sequential next"]
	132 -> 157 [label="sequential next"]
	130 -> 132 [label="perform-exit"]
	133 [label="CALL-TEXT-GET .
 
"]
	134 [label="MOVE 'Getting text...' TO LTEXT OF PM-S
"]
	135 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	136 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	137 [label="CALL WS-TEXT-GET USING TG-S
"]
	138 [label="EVALUATE LXG-STATUS
" shape=diamond]
	140 [label="WHEN 'OK '
" shape=diamond]
	141 [label=CONTINUE
]
	141 -> 130 [label="sequential next"]
	140 -> 141 [label=true]
	142 [label="WHEN 'SKP'
" shape=diamond]
	142 -> 141 [label=true]
	143 [label="WHEN 'EOF'
" shape=diamond]
	143 -> 141 [label=true]
	142 -> 143 [label="sequential next"]
	140 -> 142 [label="sequential next"]
	138 -> 140 [label="evaluate when"]
	146 [label="WHEN 'ERR'
" shape=diamond]
	147 [label="MOVE 'Error on TEXT-GET' TO LTEXT OF PM-S
"]
	149 [label="SET LLEVEL-MAX OF PM-S TO TRUE
"]
	150 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	151 [label="PERFORM END-ON-ERROR
"]
	89 [label="END-ON-ERROR .
 
"]
	90 [label="PERFORM CLOSE-STREAMS
"]
	122 [label="SET LMAINS-ERR TO TRUE
"]
	123 [label=GOBACK
]
	122 -> 123 [label="sequential next"]
	90 -> 122 [label="sequential next"]
	90 -> 93 [label="procedure call"]
	89 -> 90 [label="sequential next"]
	151 -> 89 [label="procedure call"]
	139 [label="END-EVALUATE
"]
	151 -> 139 [label="perform-exit"]
	150 -> 151 [label="sequential next"]
	149 -> 150 [label="sequential next"]
	147 -> 149 [label="sequential next"]
	146 -> 147 [label=true]
	146 -> 139 [label="sequential next"]
	138 -> 146 [label="evaluate when"]
	137 -> 138 [label="sequential next"]
	136 -> 137 [label="sequential next"]
	135 -> 136 [label="sequential next"]
	134 -> 135 [label="sequential next"]
	133 -> 134 [label="sequential next"]
	130 -> 133 [label="procedure call"]
	129 -> 130 [label="sequential next"]
	128 -> 129 [label="sequential next"]
	127 -> 128 [label="sequential next"]
	103 -> 127 [label="sequential next"]
	101 -> 103 [label="perform-exit"]
	104 [label="CALL-TEXT-PUT .
 
"]
	105 [label="MOVE 32 TO LXP-TLENGTH
"]
	106 [label="CALL WS-TEXT-PUT USING TP-S
"]
	107 [label="EVALUATE LXP-STATUS
" shape=diamond]
	109 [label="WHEN 'OK '
" shape=diamond]
	110 [label=CONTINUE
]
	110 -> 101 [label="sequential next"]
	109 -> 110 [label=true]
	107 -> 109 [label="evaluate when"]
	113 [label="WHEN 'ERR'
" shape=diamond]
	114 [label="MOVE 'Error on TEXT-PUT' TO LTEXT OF PM-S
"]
	116 [label="SET LLEVEL-MAX OF PM-S TO TRUE
"]
	117 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	118 [label="PERFORM END-ON-ERROR
"]
	118 -> 89 [label="procedure call"]
	108 [label="END-EVALUATE
"]
	118 -> 108 [label="perform-exit"]
	117 -> 118 [label="sequential next"]
	116 -> 117 [label="sequential next"]
	114 -> 116 [label="sequential next"]
	113 -> 114 [label=true]
	113 -> 108 [label="sequential next"]
	107 -> 113 [label="evaluate when"]
	106 -> 107 [label="sequential next"]
	105 -> 106 [label="sequential next"]
	104 -> 105 [label="sequential next"]
	101 -> 104 [label="procedure call"]
	100 -> 101 [label="sequential next"]
	99 -> 100 [label="sequential next"]
	98 -> 99 [label="sequential next"]
	97 -> 98 [label="sequential next"]
	96 -> 97 [label="sequential next"]
	95 -> 96 [label="sequential next"]
	94 -> 95 [label="sequential next"]
	93 -> 94 [label="sequential next"]
	636 -> 93 [label="procedure call"]
	635 -> 636 [label="sequential next"]
	634 -> 635 [label="sequential next"]
	63 -> 634 [label="sequential next"]
	61 -> 63 [label="perform-exit"]
	64 [label="MAIN-ACTION .
 
"]
	65 [label="PERFORM GET-DATA
"]
	67 [label="MOVE WS-ACTION ( 1 : 1 ) TO IO-ACTION OF IOCOMM
"]
	180 [label="MOVE WS-MODE TO IO-MODE OF IOCOMM
"]
	181 [label="MOVE WS-BITS TO IO-BITS OF IOCOMM
"]
	182 [label="MOVE PM-S TO IOPUTM
"]
	183 [label="PERFORM CALL-TEXT-GET
"]
	185 [label="EVALUATE WS-MODE
" shape=diamond]
	189 [label="WHEN 'CBC'
" shape=diamond]
	190 [label="MOVE LMAIN-IV TO XOR-A
"]
	188 [label="END-EVALUATE
"]
	211 [label="PERFORM UNTIL LXGS-EOF OR LXGS-ERR
"]
	212 [label="IF LXGS-SKP
" shape=diamond]
	214 [label=CONTINUE
]
	214 -> 211 [label="sequential next"]
	212 -> 214 [label=true]
	216 [label="EVALUATE WS-MODE ALSO WS-ACTION
" shape=diamond]
	219 [label="WHEN 'ECB' ALSO 'CIPHER  '
" shape=diamond]
	220 [label="PERFORM ECB-CIPHER
"]
	223 [label="MOVE IO-TEXT OF IOCOMM TO LXP-TEXT
"]
	218 [label="END-EVALUATE
"]
	600 [label="STRING 'Result: ' LXP-TEXT DELIMITED BY SIZE INTO LTEXT OF PM-S
"]
	601 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	602 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	603 [label="PERFORM CALL-TEXT-PUT
"]
	605 [label="EVALUATE WS-MODE ALSO WS-ACTION
" shape=diamond]
	609 [label="WHEN 'CFB' ALSO 'CIPHER  '
" shape=diamond]
	610 [label="MOVE XOR-R TO IO-TEXT OF IOCOMM
"]
	612 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	613 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	614 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	608 [label="END-EVALUATE
"]
	215 [label="END-IF
"]
	628 [label="PERFORM CALL-TEXT-GET
"]
	628 -> 133 [label="procedure call"]
	628 -> 211 [label="perform-exit"]
	215 -> 628 [label="sequential next"]
	608 -> 215 [label="sequential next"]
	614 -> 608 [label="sequential next"]
	613 -> 614 [label="sequential next"]
	612 -> 613 [label="sequential next"]
	610 -> 612 [label="sequential next"]
	609 -> 610 [label=true]
	605 -> 609 [label="evaluate when"]
	616 [label="WHEN 'CFB' ALSO 'DECIPHER'
" shape=diamond]
	617 [label="PERFORM PAD
"]
	620 [label="MOVE PAD-X TO IO-TEXT OF IOCOMM
"]
	623 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	624 [label="MOVE 'C' TO IO-ACTION
"]
	625 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	626 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	626 -> 608 [label="sequential next"]
	625 -> 626 [label="sequential next"]
	624 -> 625 [label="sequential next"]
	623 -> 624 [label="sequential next"]
	620 -> 623 [label="sequential next"]
	617 -> 620 [label="perform-exit"]
	228 [label="PAD .
 
"]
	229 [label="MOVE ALL '0' TO PAD-X
"]
	230 [label="MOVE LXG-TEXT ( 1 : LXG-TLENGTH ) TO PAD-X ( 33 - LXG-TLENGTH : LXG-TLENGTH )
"]
	229 -> 230 [label="sequential next"]
	228 -> 229 [label="sequential next"]
	617 -> 228 [label="procedure call"]
	616 -> 617 [label=true]
	616 -> 608 [label="sequential next"]
	605 -> 616 [label="evaluate when"]
	603 -> 605 [label="perform-exit"]
	603 -> 104 [label="procedure call"]
	602 -> 603 [label="sequential next"]
	601 -> 602 [label="sequential next"]
	600 -> 601 [label="sequential next"]
	218 -> 600 [label="sequential next"]
	223 -> 218 [label="sequential next"]
	220 -> 223 [label="perform-exit"]
	224 [label="ECB-CIPHER .
 
"]
	225 [label="PERFORM PAD
"]
	227 [label="MOVE PAD-X TO IO-TEXT OF IOCOMM
"]
	233 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	234 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	235 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	234 -> 235 [label="sequential next"]
	233 -> 234 [label="sequential next"]
	227 -> 233 [label="sequential next"]
	225 -> 227 [label="perform-exit"]
	225 -> 228 [label="procedure call"]
	224 -> 225 [label="sequential next"]
	220 -> 224 [label="procedure call"]
	219 -> 220 [label=true]
	216 -> 219 [label="evaluate when"]
	239 [label="WHEN 'CBC' ALSO 'CIPHER  '
" shape=diamond]
	240 [label="PERFORM CBC-CIPHER
"]
	243 [label="MOVE IO-TEXT OF IOCOMM TO LXP-TEXT
"]
	243 -> 218 [label="sequential next"]
	240 -> 243 [label="perform-exit"]
	244 [label="CBC-CIPHER .
 
"]
	245 [label="PERFORM PAD
"]
	247 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	250 [label="MOVE PAD-X TO XOR-B
"]
	251 [label="PERFORM XOR
"]
	253 [label="MOVE XOR-R TO IO-TEXT OF IOCOMM
"]
	326 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	327 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	328 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	327 -> 328 [label="sequential next"]
	326 -> 327 [label="sequential next"]
	253 -> 326 [label="sequential next"]
	251 -> 253 [label="perform-exit"]
	254 [label="XOR .
 
"]
	255 [label="PERFORM VARYING XOR-I FROM 1 BY 1 UNTIL XOR-I > 16
"]
	256 [label="MOVE XOR-AP ( XOR-I ) TO BYTE-A OF SUMM
"]
	258 [label="MOVE XOR-BP ( XOR-I ) TO BYTE-B OF SUMM
"]
	259 [label="PERFORM ADDITION
"]
	261 [label="MOVE BYTE-R OF SUMM TO XOR-RP ( XOR-I )
"]
	261 -> 255 [label="sequential next"]
	259 -> 261 [label="perform-exit"]
	262 [label="ADDITION .
 
"]
	263 [label="MOVE WORD-A OF SUMM ( 1 ) TO W2D-A
"]
	264 [label="PERFORM W2D
"]
	266 [label="MOVE W2D-R TO XB-X
"]
	300 [label="MOVE WORD-B OF SUMM ( 1 ) TO W2D-A
"]
	301 [label="PERFORM W2D
"]
	303 [label="MOVE W2D-R TO XB-Y
"]
	306 [label="ADD 1 TO XB-X XB-Y
"]
	307 [label="MOVE XB-R ( XB-X XB-Y ) TO WORD-R OF SUMM ( 1 )
"]
	308 [label="MOVE WORD-A OF SUMM ( 2 ) TO W2D-A
"]
	309 [label="PERFORM W2D
"]
	311 [label="MOVE W2D-R TO XB-X
"]
	314 [label="MOVE WORD-B OF SUMM ( 2 ) TO W2D-A
"]
	315 [label="PERFORM W2D
"]
	317 [label="MOVE W2D-R TO XB-Y
"]
	320 [label="ADD 1 TO XB-X XB-Y
"]
	321 [label="MOVE XB-R ( XB-X XB-Y ) TO WORD-R OF SUMM ( 2 )
"]
	320 -> 321 [label="sequential next"]
	317 -> 320 [label="sequential next"]
	315 -> 317 [label="perform-exit"]
	267 [label="W2D .
 
"]
	268 [label="IF W2D-A IS NUMERIC
" shape=diamond]
	269 [label="MOVE W2D-A TO W2D-R
"]
	270 [label="END-IF
"]
	269 -> 270 [label="sequential next"]
	268 -> 269 [label=true]
	271 [label="EVALUATE W2D-A
" shape=diamond]
	274 [label="WHEN 'A'
" shape=diamond]
	275 [label="MOVE 10 TO W2D-R
"]
	273 [label="END-EVALUATE
"]
	273 -> 270 [label="sequential next"]
	275 -> 273 [label="sequential next"]
	274 -> 275 [label=true]
	271 -> 274 [label="evaluate when"]
	278 [label="WHEN 'B'
" shape=diamond]
	279 [label="MOVE 11 TO W2D-R
"]
	279 -> 273 [label="sequential next"]
	278 -> 279 [label=true]
	271 -> 278 [label="evaluate when"]
	282 [label="WHEN 'C'
" shape=diamond]
	283 [label="MOVE 12 TO W2D-R
"]
	283 -> 273 [label="sequential next"]
	282 -> 283 [label=true]
	271 -> 282 [label="evaluate when"]
	286 [label="WHEN 'D'
" shape=diamond]
	287 [label="MOVE 13 TO W2D-R
"]
	287 -> 273 [label="sequential next"]
	286 -> 287 [label=true]
	271 -> 286 [label="evaluate when"]
	290 [label="WHEN 'E'
" shape=diamond]
	291 [label="MOVE 14 TO W2D-R
"]
	291 -> 273 [label="sequential next"]
	290 -> 291 [label=true]
	271 -> 290 [label="evaluate when"]
	294 [label="WHEN 'F'
" shape=diamond]
	295 [label="MOVE 15 TO W2D-R
"]
	295 -> 273 [label="sequential next"]
	294 -> 295 [label=true]
	294 -> 273 [label="sequential next"]
	271 -> 294 [label="evaluate when"]
	268 -> 271 [label=false]
	267 -> 268 [label="sequential next"]
	315 -> 267 [label="procedure call"]
	314 -> 315 [label="sequential next"]
	311 -> 314 [label="sequential next"]
	309 -> 311 [label="perform-exit"]
	309 -> 267 [label="procedure call"]
	308 -> 309 [label="sequential next"]
	307 -> 308 [label="sequential next"]
	306 -> 307 [label="sequential next"]
	303 -> 306 [label="sequential next"]
	301 -> 303 [label="perform-exit"]
	301 -> 267 [label="procedure call"]
	300 -> 301 [label="sequential next"]
	266 -> 300 [label="sequential next"]
	264 -> 266 [label="perform-exit"]
	264 -> 267 [label="procedure call"]
	263 -> 264 [label="sequential next"]
	262 -> 263 [label="sequential next"]
	259 -> 262 [label="procedure call"]
	258 -> 259 [label="sequential next"]
	256 -> 258 [label="sequential next"]
	255 -> 256 [label=iteration]
	254 -> 255 [label="sequential next"]
	251 -> 254 [label="procedure call"]
	250 -> 251 [label="sequential next"]
	247 -> 250 [label="sequential next"]
	245 -> 247 [label="perform-exit"]
	245 -> 228 [label="procedure call"]
	244 -> 245 [label="sequential next"]
	240 -> 244 [label="procedure call"]
	239 -> 240 [label=true]
	216 -> 239 [label="evaluate when"]
	332 [label="WHEN 'CFB' ALSO 'CIPHER  '
" shape=diamond]
	333 [label="PERFORM CFB-CIPHER
"]
	336 [label="MOVE XOR-R TO LXP-TEXT
"]
	336 -> 218 [label="sequential next"]
	333 -> 336 [label="perform-exit"]
	337 [label="CFB-CIPHER .
 
"]
	338 [label="PERFORM PAD
"]
	340 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	343 [label="MOVE PAD-X TO XOR-B
"]
	344 [label="PERFORM XOR
"]
	344 -> 254 [label="procedure call"]
	343 -> 344 [label="sequential next"]
	340 -> 343 [label="sequential next"]
	338 -> 340 [label="perform-exit"]
	338 -> 228 [label="procedure call"]
	337 -> 338 [label="sequential next"]
	333 -> 337 [label="procedure call"]
	332 -> 333 [label=true]
	216 -> 332 [label="evaluate when"]
	351 [label="WHEN 'OFB' ALSO 'CIPHER  '
" shape=diamond]
	352 [label="PERFORM OFB-CIPHER
"]
	355 [label="MOVE XOR-R TO LXP-TEXT
"]
	355 -> 218 [label="sequential next"]
	352 -> 355 [label="perform-exit"]
	356 [label="OFB-CIPHER .
 
"]
	357 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	358 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	359 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	360 [label="PERFORM PAD
"]
	362 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	365 [label="MOVE PAD-X TO XOR-B
"]
	366 [label="PERFORM XOR
"]
	366 -> 254 [label="procedure call"]
	365 -> 366 [label="sequential next"]
	362 -> 365 [label="sequential next"]
	360 -> 362 [label="perform-exit"]
	360 -> 228 [label="procedure call"]
	359 -> 360 [label="sequential next"]
	358 -> 359 [label="sequential next"]
	357 -> 358 [label="sequential next"]
	356 -> 357 [label="sequential next"]
	352 -> 356 [label="procedure call"]
	351 -> 352 [label=true]
	216 -> 351 [label="evaluate when"]
	373 [label="WHEN 'CTR' ALSO 'CIPHER  '
" shape=diamond]
	374 [label="PERFORM CTR-CIPHER
"]
	377 [label="MOVE XOR-R TO LXP-TEXT
"]
	377 -> 218 [label="sequential next"]
	374 -> 377 [label="perform-exit"]
	378 [label="CTR-CIPHER .
 
"]
	379 [label="MOVE WS-CTR TO IO-TEXT OF IOCOMM
"]
	380 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	381 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	382 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	383 [label="PERFORM PAD
"]
	385 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	388 [label="MOVE PAD-X TO XOR-B
"]
	389 [label="PERFORM XOR
"]
	391 [label="PERFORM HEX-ADDITION
"]
	396 [label="HEX-ADDITION .
 
"]
	397 [label="SET SW-CARRY-T TO TRUE
"]
	398 [label="PERFORM VARYING HA-I FROM 32 BY -1 UNTIL HA-I < 1 OR SW-CARRY-F
"]
	399 [label="PERFORM HEX-ADD
"]
	403 [label="HEX-ADD .
 
"]
	404 [label="IF SW-CARRY-T
" shape=diamond]
	405 [label="SET SW-CARRY-F TO TRUE
"]
	408 [label="EVALUATE WS-C ( HA-I )
" shape=diamond]
	410 [label="WHEN 'F'
" shape=diamond]
	411 [label="MOVE '0' TO WS-C ( HA-I )
"]
	413 [label="SET SW-CARRY-T TO TRUE
"]
	409 [label="END-EVALUATE
"]
	406 [label="END-IF
"]
	409 -> 406 [label="sequential next"]
	413 -> 409 [label="sequential next"]
	411 -> 413 [label="sequential next"]
	410 -> 411 [label=true]
	408 -> 410 [label="evaluate when"]
	415 [label="WHEN 'E'
" shape=diamond]
	416 [label="MOVE 'F' TO WS-C ( HA-I )
"]
	416 -> 409 [label="sequential next"]
	415 -> 416 [label=true]
	408 -> 415 [label="evaluate when"]
	419 [label="WHEN 'D'
" shape=diamond]
	420 [label="MOVE 'E' TO WS-C ( HA-I )
"]
	420 -> 409 [label="sequential next"]
	419 -> 420 [label=true]
	408 -> 419 [label="evaluate when"]
	423 [label="WHEN 'C'
" shape=diamond]
	424 [label="MOVE 'D' TO WS-C ( HA-I )
"]
	424 -> 409 [label="sequential next"]
	423 -> 424 [label=true]
	408 -> 423 [label="evaluate when"]
	427 [label="WHEN 'B'
" shape=diamond]
	428 [label="MOVE 'C' TO WS-C ( HA-I )
"]
	428 -> 409 [label="sequential next"]
	427 -> 428 [label=true]
	408 -> 427 [label="evaluate when"]
	431 [label="WHEN 'A'
" shape=diamond]
	432 [label="MOVE 'B' TO WS-C ( HA-I )
"]
	432 -> 409 [label="sequential next"]
	431 -> 432 [label=true]
	408 -> 431 [label="evaluate when"]
	435 [label="WHEN '9'
" shape=diamond]
	436 [label="MOVE 'A' TO WS-C ( HA-I )
"]
	436 -> 409 [label="sequential next"]
	435 -> 436 [label=true]
	408 -> 435 [label="evaluate when"]
	439 [label="WHEN '8'
" shape=diamond]
	440 [label="MOVE '9' TO WS-C ( HA-I )
"]
	440 -> 409 [label="sequential next"]
	439 -> 440 [label=true]
	408 -> 439 [label="evaluate when"]
	443 [label="WHEN '7'
" shape=diamond]
	444 [label="MOVE '8' TO WS-C ( HA-I )
"]
	444 -> 409 [label="sequential next"]
	443 -> 444 [label=true]
	408 -> 443 [label="evaluate when"]
	447 [label="WHEN '6'
" shape=diamond]
	448 [label="MOVE '7' TO WS-C ( HA-I )
"]
	448 -> 409 [label="sequential next"]
	447 -> 448 [label=true]
	408 -> 447 [label="evaluate when"]
	451 [label="WHEN '5'
" shape=diamond]
	452 [label="MOVE '6' TO WS-C ( HA-I )
"]
	452 -> 409 [label="sequential next"]
	451 -> 452 [label=true]
	408 -> 451 [label="evaluate when"]
	455 [label="WHEN '4'
" shape=diamond]
	456 [label="MOVE '5' TO WS-C ( HA-I )
"]
	456 -> 409 [label="sequential next"]
	455 -> 456 [label=true]
	408 -> 455 [label="evaluate when"]
	459 [label="WHEN '3'
" shape=diamond]
	460 [label="MOVE '4' TO WS-C ( HA-I )
"]
	460 -> 409 [label="sequential next"]
	459 -> 460 [label=true]
	408 -> 459 [label="evaluate when"]
	463 [label="WHEN '2'
" shape=diamond]
	464 [label="MOVE '3' TO WS-C ( HA-I )
"]
	464 -> 409 [label="sequential next"]
	463 -> 464 [label=true]
	408 -> 463 [label="evaluate when"]
	467 [label="WHEN '1'
" shape=diamond]
	468 [label="MOVE '2' TO WS-C ( HA-I )
"]
	468 -> 409 [label="sequential next"]
	467 -> 468 [label=true]
	408 -> 467 [label="evaluate when"]
	471 [label="WHEN '0'
" shape=diamond]
	472 [label="MOVE '1' TO WS-C ( HA-I )
"]
	472 -> 409 [label="sequential next"]
	471 -> 472 [label=true]
	471 -> 409 [label="sequential next"]
	408 -> 471 [label="evaluate when"]
	405 -> 408 [label="sequential next"]
	404 -> 405 [label=true]
	404 -> 406 [label="outside-if"]
	403 -> 404 [label="sequential next"]
	399 -> 403 [label="procedure call"]
	399 -> 398 [label="perform-exit"]
	398 -> 399 [label=iteration]
	397 -> 398 [label="sequential next"]
	396 -> 397 [label="sequential next"]
	391 -> 396 [label="procedure call"]
	389 -> 391 [label="perform-exit"]
	389 -> 254 [label="procedure call"]
	388 -> 389 [label="sequential next"]
	385 -> 388 [label="sequential next"]
	383 -> 385 [label="perform-exit"]
	383 -> 228 [label="procedure call"]
	382 -> 383 [label="sequential next"]
	381 -> 382 [label="sequential next"]
	380 -> 381 [label="sequential next"]
	379 -> 380 [label="sequential next"]
	378 -> 379 [label="sequential next"]
	374 -> 378 [label="procedure call"]
	373 -> 374 [label=true]
	216 -> 373 [label="evaluate when"]
	480 [label="WHEN 'ECB' ALSO 'DECIPHER'
" shape=diamond]
	481 [label="PERFORM ECB-DECIPHER
"]
	484 [label="MOVE IO-TEXT OF IOCOMM TO LXP-TEXT
"]
	484 -> 218 [label="sequential next"]
	481 -> 484 [label="perform-exit"]
	485 [label="ECB-DECIPHER .
 
"]
	486 [label="PERFORM PAD
"]
	488 [label="MOVE PAD-X TO IO-TEXT OF IOCOMM
"]
	491 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	492 [label="MOVE WS-DECIPHER-DATA TO IOTAB
"]
	493 [label="PERFORM KEY-SCHEDULE
"]
	495 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	493 -> 495 [label="perform-exit"]
	496 [label="KEY-SCHEDULE .
 
"]
	497 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	498 [label="MOVE 'K' TO IO-ACTION OF IOCOMM
"]
	499 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	500 [label="MOVE 'D' TO IO-ACTION OF IOCOMM
"]
	501 [label="MOVE WS-DECIPHER-DATA TO IOTAB
"]
	500 -> 501 [label="sequential next"]
	499 -> 500 [label="sequential next"]
	498 -> 499 [label="sequential next"]
	497 -> 498 [label="sequential next"]
	496 -> 497 [label="sequential next"]
	493 -> 496 [label="procedure call"]
	492 -> 493 [label="sequential next"]
	491 -> 492 [label="sequential next"]
	488 -> 491 [label="sequential next"]
	486 -> 488 [label="perform-exit"]
	486 -> 228 [label="procedure call"]
	485 -> 486 [label="sequential next"]
	481 -> 485 [label="procedure call"]
	480 -> 481 [label=true]
	216 -> 480 [label="evaluate when"]
	507 [label="WHEN 'CBC' ALSO 'DECIPHER'
" shape=diamond]
	508 [label="PERFORM CBC-DECIPHER
"]
	511 [label="MOVE XOR-R TO LXP-TEXT
"]
	511 -> 218 [label="sequential next"]
	508 -> 511 [label="perform-exit"]
	512 [label="CBC-DECIPHER .
 
"]
	513 [label="PERFORM ECB-DECIPHER
"]
	515 [label="MOVE IO-TEXT OF IOCOMM TO XOR-B
"]
	518 [label="PERFORM XOR
"]
	520 [label="PERFORM PAD
"]
	524 [label="MOVE PAD-X TO XOR-A
"]
	520 -> 524 [label="perform-exit"]
	520 -> 228 [label="procedure call"]
	518 -> 520 [label="perform-exit"]
	518 -> 254 [label="procedure call"]
	515 -> 518 [label="sequential next"]
	513 -> 515 [label="perform-exit"]
	513 -> 485 [label="procedure call"]
	512 -> 513 [label="sequential next"]
	508 -> 512 [label="procedure call"]
	507 -> 508 [label=true]
	216 -> 507 [label="evaluate when"]
	530 [label="WHEN 'CFB' ALSO 'DECIPHER'
" shape=diamond]
	531 [label="PERFORM CFB-DECIPHER
"]
	534 [label="MOVE XOR-R TO LXP-TEXT
"]
	534 -> 218 [label="sequential next"]
	531 -> 534 [label="perform-exit"]
	535 [label="CFB-DECIPHER .
 
"]
	536 [label="PERFORM PAD
"]
	538 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	541 [label="MOVE PAD-X TO XOR-B
"]
	542 [label="PERFORM XOR
"]
	542 -> 254 [label="procedure call"]
	541 -> 542 [label="sequential next"]
	538 -> 541 [label="sequential next"]
	536 -> 538 [label="perform-exit"]
	536 -> 228 [label="procedure call"]
	535 -> 536 [label="sequential next"]
	531 -> 535 [label="procedure call"]
	530 -> 531 [label=true]
	216 -> 530 [label="evaluate when"]
	549 [label="WHEN 'OFB' ALSO 'DECIPHER'
" shape=diamond]
	550 [label="PERFORM OFB-DECIPHER
"]
	553 [label="MOVE XOR-R TO LXP-TEXT
"]
	553 -> 218 [label="sequential next"]
	550 -> 553 [label="perform-exit"]
	554 [label="OFB-DECIPHER .
 
"]
	555 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	556 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	557 [label="MOVE 'C' TO IO-ACTION
"]
	558 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	559 [label="PERFORM PAD
"]
	561 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	564 [label="MOVE PAD-X TO XOR-B
"]
	565 [label="PERFORM XOR
"]
	565 -> 254 [label="procedure call"]
	564 -> 565 [label="sequential next"]
	561 -> 564 [label="sequential next"]
	559 -> 561 [label="perform-exit"]
	559 -> 228 [label="procedure call"]
	558 -> 559 [label="sequential next"]
	557 -> 558 [label="sequential next"]
	556 -> 557 [label="sequential next"]
	555 -> 556 [label="sequential next"]
	554 -> 555 [label="sequential next"]
	550 -> 554 [label="procedure call"]
	549 -> 550 [label=true]
	216 -> 549 [label="evaluate when"]
	572 [label="WHEN 'CTR' ALSO 'DECIPHER'
" shape=diamond]
	573 [label="PERFORM CTR-DECIPHER
"]
	576 [label="MOVE XOR-R TO LXP-TEXT
"]
	576 -> 218 [label="sequential next"]
	573 -> 576 [label="perform-exit"]
	577 [label="CTR-DECIPHER .
 
"]
	578 [label="MOVE WS-CTR TO IO-TEXT OF IOCOMM
"]
	579 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	580 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	581 [label="MOVE 'C' TO IO-ACTION
"]
	582 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	583 [label="PERFORM PAD
"]
	585 [label="MOVE IO-TEXT OF IOCOMM TO XOR-A
"]
	588 [label="MOVE PAD-X TO XOR-B
"]
	589 [label="PERFORM XOR
"]
	591 [label="PERFORM HEX-ADDITION
"]
	591 -> 396 [label="procedure call"]
	589 -> 591 [label="perform-exit"]
	589 -> 254 [label="procedure call"]
	588 -> 589 [label="sequential next"]
	585 -> 588 [label="sequential next"]
	583 -> 585 [label="perform-exit"]
	583 -> 228 [label="procedure call"]
	582 -> 583 [label="sequential next"]
	581 -> 582 [label="sequential next"]
	580 -> 581 [label="sequential next"]
	579 -> 580 [label="sequential next"]
	578 -> 579 [label="sequential next"]
	577 -> 578 [label="sequential next"]
	573 -> 577 [label="procedure call"]
	572 -> 573 [label=true]
	572 -> 218 [label="sequential next"]
	216 -> 572 [label="evaluate when"]
	212 -> 216 [label=false]
	211 -> 212 [label=iteration]
	188 -> 211 [label="sequential next"]
	190 -> 188 [label="sequential next"]
	189 -> 190 [label=true]
	185 -> 189 [label="evaluate when"]
	193 [label="WHEN 'CFB'
" shape=diamond]
	194 [label="MOVE LMAIN-IV TO IO-TEXT OF IOCOMM
"]
	196 [label="MOVE LMAIN-KEY TO IO-KEY OF IOCOMM
"]
	197 [label="MOVE WS-CIPHER-DATA TO IOTAB
"]
	198 [label="MOVE 'C' TO IO-ACTION
"]
	199 [label="CALL 'AESCORE' USING IOCOMM IOTAB IOPUTM
"]
	200 [label="MOVE IO-TEXT TO XOR-A
"]
	200 -> 188 [label="sequential next"]
	199 -> 200 [label="sequential next"]
	198 -> 199 [label="sequential next"]
	197 -> 198 [label="sequential next"]
	196 -> 197 [label="sequential next"]
	194 -> 196 [label="sequential next"]
	193 -> 194 [label=true]
	185 -> 193 [label="evaluate when"]
	202 [label="WHEN 'OFB'
" shape=diamond]
	203 [label="MOVE LMAIN-IV TO IO-TEXT OF IOCOMM
"]
	203 -> 188 [label="sequential next"]
	202 -> 203 [label=true]
	185 -> 202 [label="evaluate when"]
	206 [label="WHEN 'CTR'
" shape=diamond]
	207 [label="MOVE ALL '0' TO WS-CTR
"]
	209 [label="MOVE '1' TO WS-C ( 32 )
"]
	209 -> 188 [label="sequential next"]
	207 -> 209 [label="sequential next"]
	206 -> 207 [label=true]
	206 -> 188 [label="sequential next"]
	185 -> 206 [label="evaluate when"]
	183 -> 185 [label="perform-exit"]
	183 -> 133 [label="procedure call"]
	182 -> 183 [label="sequential next"]
	181 -> 182 [label="sequential next"]
	180 -> 181 [label="sequential next"]
	67 -> 180 [label="sequential next"]
	65 -> 67 [label="perform-exit"]
	68 [label="GET-DATA .
 
"]
	69 [label="PERFORM CALL-DATA-GET
"]
	71 [label="MOVE LDG-TEXT TO WS-CIPHER-DATA
"]
	165 [label="PERFORM CALL-DATA-GET
"]
	167 [label="MOVE LDG-TEXT TO WS-DECIPHER-DATA
"]
	170 [label="MOVE 'Closing DATA-GET' TO LTEXT OF PM-S
"]
	171 [label="SET LLEVEL-INF OF PM-S TO TRUE
"]
	172 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	173 [label="MOVE 'C' TO LDGS-CFILE OF DG-S
"]
	174 [label="PERFORM CALL-DATA-GET
"]
	72 [label="CALL-DATA-GET .
 
"]
	73 [label="CALL WS-DATA-GET USING DG-S
"]
	74 [label="EVALUATE LDG-STATUS
" shape=diamond]
	76 [label="WHEN 'OK '
" shape=diamond]
	77 [label=CONTINUE
]
	77 -> 69 [label="sequential next"]
	76 -> 77 [label=true]
	78 [label="WHEN 'EOF'
" shape=diamond]
	78 -> 77 [label=true]
	76 -> 78 [label="sequential next"]
	74 -> 76 [label="evaluate when"]
	81 [label="WHEN 'ERR'
" shape=diamond]
	82 [label="MOVE 'Error on DATA-GET' TO LTEXT OF PM-S
"]
	84 [label="SET LLEVEL-MAX OF PM-S TO TRUE
"]
	85 [label="CALL WS-PUT-MESSAGE USING PM-S
"]
	86 [label="PERFORM END-ON-ERROR
"]
	86 -> 89 [label="procedure call"]
	75 [label="END-EVALUATE
"]
	86 -> 75 [label="perform-exit"]
	85 -> 86 [label="sequential next"]
	84 -> 85 [label="sequential next"]
	82 -> 84 [label="sequential next"]
	81 -> 82 [label=true]
	81 -> 75 [label="sequential next"]
	74 -> 81 [label="evaluate when"]
	73 -> 74 [label="sequential next"]
	72 -> 73 [label="sequential next"]
	174 -> 72 [label="procedure call"]
	173 -> 174 [label="sequential next"]
	172 -> 173 [label="sequential next"]
	171 -> 172 [label="sequential next"]
	170 -> 171 [label="sequential next"]
	167 -> 170 [label="sequential next"]
	165 -> 167 [label="perform-exit"]
	165 -> 72 [label="procedure call"]
	71 -> 165 [label="sequential next"]
	69 -> 71 [label="perform-exit"]
	69 -> 72 [label="procedure call"]
	68 -> 69 [label="sequential next"]
	65 -> 68 [label="procedure call"]
	64 -> 65 [label="sequential next"]
	61 -> 64 [label="procedure call"]
	60 -> 61 [label="sequential next"]
	59 -> 60 [label="sequential next"]
	58 -> 59 [label="sequential next"]
	13 -> 58 [label="sequential next"]
	11 -> 13 [label="perform-exit"]
	14 [label="CHECK-INPUT .
 
"]
	15 [label="IF LMAIN-DATA-GET = SPACES OR LOW-VALUES
" shape=diamond]
	16 [label="MOVE 'AESTGET' TO WS-DATA-GET
"]
	17 [label="END-IF
"]
	21 [label="IF LMAIN-TEXT-GET = SPACES OR LOW-VALUES
" shape=diamond]
	22 [label="MOVE 'AESXGET' TO WS-TEXT-GET
"]
	23 [label="END-IF
"]
	27 [label="IF LMAIN-TEXT-PUT = SPACES OR LOW-VALUES
" shape=diamond]
	28 [label="MOVE 'AESTPUT' TO WS-TEXT-PUT
"]
	29 [label="END-IF
"]
	33 [label="IF LMAIN-PUT-MESSAGE = SPACES OR LOW-VALUES
" shape=diamond]
	34 [label="MOVE 'AESMPUT' TO WS-PUT-MESSAGE
"]
	35 [label="END-IF
"]
	39 [label="IF LMAIN-MODE = 'ECB' OR 'CBC' OR 'CFB' OR 'OFB' OR 'CTR'
" shape=diamond]
	40 [label="MOVE LMAIN-MODE TO WS-MODE
"]
	41 [label="END-IF
"]
	45 [label="IF LMAIN-ACTION = 'CIPHER  ' OR 'DECIPHER'
" shape=diamond]
	46 [label="MOVE LMAIN-ACTION TO WS-ACTION
"]
	47 [label="END-IF
"]
	51 [label="IF LMAIN-BITS = '128' OR '192' OR '256'
" shape=diamond]
	52 [label="MOVE LMAIN-BITS TO WS-BITS
"]
	53 [label="END-IF
"]
	53 -> 11 [label="sequential next"]
	52 -> 53 [label="sequential next"]
	51 -> 52 [label=true]
	54 [label="MOVE '128' TO WS-BITS
"]
	54 -> 53 [label="sequential next"]
	51 -> 54 [label=false]
	47 -> 51 [label="sequential next"]
	46 -> 47 [label="sequential next"]
	45 -> 46 [label=true]
	48 [label="MOVE 'CIPHER  ' TO WS-ACTION
"]
	48 -> 47 [label="sequential next"]
	45 -> 48 [label=false]
	41 -> 45 [label="sequential next"]
	40 -> 41 [label="sequential next"]
	39 -> 40 [label=true]
	42 [label="MOVE 'ECB' TO WS-MODE
"]
	42 -> 41 [label="sequential next"]
	39 -> 42 [label=false]
	35 -> 39 [label="sequential next"]
	34 -> 35 [label="sequential next"]
	33 -> 34 [label=true]
	36 [label="MOVE LMAIN-PUT-MESSAGE TO WS-PUT-MESSAGE
"]
	36 -> 35 [label="sequential next"]
	33 -> 36 [label=false]
	29 -> 33 [label="sequential next"]
	28 -> 29 [label="sequential next"]
	27 -> 28 [label=true]
	30 [label="MOVE LMAIN-TEXT-PUT TO WS-TEXT-PUT
"]
	30 -> 29 [label="sequential next"]
	27 -> 30 [label=false]
	23 -> 27 [label="sequential next"]
	22 -> 23 [label="sequential next"]
	21 -> 22 [label=true]
	24 [label="MOVE LMAIN-DATA-GET TO WS-TEXT-GET
"]
	24 -> 23 [label="sequential next"]
	21 -> 24 [label=false]
	17 -> 21 [label="sequential next"]
	16 -> 17 [label="sequential next"]
	15 -> 16 [label=true]
	18 [label="MOVE LMAIN-DATA-GET TO WS-DATA-GET
"]
	18 -> 17 [label="sequential next"]
	15 -> 18 [label=false]
	14 -> 15 [label="sequential next"]
	11 -> 14 [label="procedure call"]
	10 -> 11 [label="sequential next"]
	9 -> 10 [label="sequential next"]
	8 -> 9 [label="sequential next"]
	7 -> 8 [label="sequential next"]
	6 -> 7 [label="sequential next"]
	5 -> 6 [label="sequential next"]
	4 -> 5 [label="sequential next"]
	3 -> 4 [label="sequential next"]
	2 -> 3 [label="sequential next"]
	1 -> 2 [label="sequential next"]
}
