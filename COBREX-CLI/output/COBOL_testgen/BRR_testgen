digraph {
	"AU testgen AU 0 0 682" [label=Begin]
	"AU testgen AU 0 0 682" -> "AU testgen AU 20 2 683" [label=start]
	"AU testgen AU 20 2 683" [label="001-open .
 
string 'generated.csv' x'00' delimited by size into filename
call 'csvgen_createfile' using by reference csvhandle by reference filename by value 2 returning bool"]
	subgraph "Node 117" {
	}
	"AU testgen AU 0 0 682" -> "PC testgen PC 28 28 139" [label="sequential next"]
	"PC testgen PC 28 28 139" [label="if success"]
	subgraph "Node 118" {
	}
	"PC testgen PC 28 28 139" -> "AU testgen AU 29 29 687" [label=true]
	"AU testgen AU 29 29 687" [label="perform 004-genfile"]
	subgraph "Node 119" {
	}
	"AU testgen AU 29 29 687" -> "AU testgen AU 31 12 684" [label="perform-exit"]
	"AU testgen AU 31 12 684" [label="call 'csvgen_closefile' using by value csvhandle returning bool"]
	"AU testgen AU 31 12 684" -> "PC testgen PC 86 86 134" [label="sequential next"]
	"PC testgen PC 86 86 134" [label="if failure"]
	"PC testgen PC 86 86 134" -> "AU testgen AU 37 37 668" [label=true]
	"PC testgen PC 86 86 134" -> "AU testgen AU 0 0 669" [label="outside-if"]
	"AU testgen AU 0 0 669" [label="END-IF"]
	"AU testgen AU 37 37 668" [label="display 'Cannot close test.csv.'"]
	"AU testgen AU 37 37 668" -> "AU testgen AU 0 0 669" [label="sequential next"]
	subgraph "Node 120" {
	}
	"AU testgen AU 31 12 684" -> "AU testgen AU 0 0 688" [label="sequential next"]
	"AU testgen AU 0 0 688" [label="END-IF"]
	subgraph "Node 121" {
	}
	"AU testgen AU 0 0 688" -> "AU testgen AU 42 42 689" [label="sequential next"]
	"AU testgen AU 42 42 689" [label=goback]
	subgraph "Node 122" {
	}
	"AU testgen AU 29 29 687" -> "AU testgen AU 90 90 690" [label="procedure call"]
	"AU testgen AU 90 90 690" [label="004-genfile .
 "]
	subgraph "Node 123" {
	}
	"AU testgen AU 90 90 690" -> "AU testgen AU 92 92 691" [label="sequential next"]
	"AU testgen AU 92 92 691" [label="perform 003-genline"]
	subgraph "Node 124" {
	}
	"AU testgen AU 92 92 691" -> "AU testgen AU 68 3 685" [label="procedure call"]
	"AU testgen AU 68 3 685" [label="003-genline .
 
call 'csvgen_beginrow' using by value csvhandle returning bool"]
	"AU testgen AU 68 3 685" -> "PC testgen PC 36 36 135" [label="sequential next"]
	"PC testgen PC 36 36 135" [label="if failure"]
	"PC testgen PC 36 36 135" -> "AU testgen AU 53 53 670" [label=true]
	"PC testgen PC 36 36 135" -> "AU testgen AU 0 0 671" [label="outside-if"]
	"AU testgen AU 0 0 671" [label="END-IF"]
	"AU testgen AU 53 53 670" [label="display 'Cannot begin row.'"]
	"AU testgen AU 53 53 670" -> "AU testgen AU 0 0 671" [label="sequential next"]
	subgraph "Node 125" {
	}
	"AU testgen AU 68 3 685" -> "AU testgen AU 78 78 678" [label="sequential next"]
	"AU testgen AU 78 78 678" [label="perform 002-genfield1"]
	"AU testgen AU 78 78 678" -> "AU testgen AU 44 5 679" [label="procedure call"]
	"AU testgen AU 44 5 679" [label="002-genfield1 .
 
string 'Foo' x'00' delimited by size into buffer
call 'csvgen_putfield' using by value csvhandle by reference buffer returning bool"]
	"AU testgen AU 44 5 679" -> "PC testgen PC 52 52 138" [label="sequential next"]
	"PC testgen PC 52 52 138" [label="if failure"]
	"PC testgen PC 52 52 138" -> "AU testgen AU 65 65 676" [label=true]
	"PC testgen PC 52 52 138" -> "AU testgen AU 0 0 677" [label="outside-if"]
	"AU testgen AU 0 0 677" [label="END-IF"]
	"AU testgen AU 0 0 677" -> "AU testgen AU 78 78 678" [label="sequential next"]
	"AU testgen AU 65 65 676" [label="display 'Cannot begin row.'"]
	"AU testgen AU 65 65 676" -> "AU testgen AU 0 0 677" [label="sequential next"]
	subgraph "Node 126" {
	}
	"AU testgen AU 78 78 678" -> "AU testgen AU 79 79 680" [label="perform-exit"]
	"AU testgen AU 79 79 680" [label="perform 002-genfield2"]
	"AU testgen AU 79 79 680" -> "AU testgen AU 56 6 681" [label="procedure call"]
	"AU testgen AU 56 6 681" [label="002-genfield2 .
 
string 'Bar,Baz' x'00' delimited by size into buffer
call 'csvgen_putfield' using by value csvhandle by reference buffer returning bool"]
	"AU testgen AU 56 6 681" -> "PC testgen PC 64 64 137" [label="sequential next"]
	"PC testgen PC 64 64 137" [label="if failure"]
	"PC testgen PC 64 64 137" -> "AU testgen AU 75 75 674" [label=true]
	"PC testgen PC 64 64 137" -> "AU testgen AU 0 0 675" [label="outside-if"]
	"AU testgen AU 0 0 675" [label="END-IF"]
	"AU testgen AU 0 0 675" -> "AU testgen AU 79 79 680" [label="sequential next"]
	"AU testgen AU 75 75 674" [label="display 'Cannot begin row.'"]
	"AU testgen AU 75 75 674" -> "AU testgen AU 0 0 675" [label="sequential next"]
	subgraph "Node 127" {
	}
	"AU testgen AU 79 79 680" -> "AU testgen AU 81 11 686" [label="perform-exit"]
	"AU testgen AU 81 11 686" [label="call 'csvgen_endrow' using by value csvhandle returning bool"]
	"AU testgen AU 81 11 686" -> "PC testgen PC 74 74 136" [label="sequential next"]
	"PC testgen PC 74 74 136" [label="if failure"]
	"PC testgen PC 74 74 136" -> "AU testgen AU 87 87 672" [label=true]
	"PC testgen PC 74 74 136" -> "AU testgen AU 0 0 673" [label="outside-if"]
	"AU testgen AU 0 0 673" [label="END-IF"]
	"AU testgen AU 87 87 672" [label="display 'Cannot end row.'"]
	"AU testgen AU 87 87 672" -> "AU testgen AU 0 0 673" [label="sequential next"]
	subgraph "Node 128" {
	}
	"AU testgen AU 81 11 686" -> "AU testgen AU 92 92 691" [label="sequential next"]
	"AU testgen AU 92 92 691" -> "AU testgen AU 29 29 687" [label="perform-exit"]
	"PC testgen PC 28 28 139" -> "AU testgen AU 40 40 692" [label=false]
	"AU testgen AU 40 40 692" [label="display 'Cannot create test.csv.'"]
	subgraph "Node 129" {
	}
	"AU testgen AU 40 40 692" -> "AU testgen AU 0 0 688" [label="sequential next"]
	node [filled=lightblue shape=circle]
	edge [color=black]
}
