digraph cluster {
	"testgen AU 0 0 643" [label=Begin fillcolor=lightblue style=filled]
	"testgen AU 20 2 644" [label="001-open .
 
string 'generated.csv' x'00' delimited by size into filename
call 'csvgen_createfile' using by reference csvhandle by reference filename by value 2 returning bool" fillcolor=lightblue style=filled]
	"testgen PC 28 28 128" [label="if success" fillcolor=lightblue style=filled]
	"testgen AU 29 29 645" [label="perform 004-genfile" fillcolor=lightblue style=filled]
	"testgen AU 31 12 646" [label="call 'csvgen_closefile' using by value csvhandle returning bool" fillcolor=lightblue style=filled]
	"testgen PC 86 86 129" [label="if failure" fillcolor=lightblue style=filled]
	"testgen AU 37 37 647" [label="display 'Cannot close test.csv.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 648" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 0 0 649" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 42 42 650" [label=goback fillcolor=lightblue style=filled]
	"testgen AU 90 90 651" [label="004-genfile .
 " fillcolor=lightblue style=filled]
	"testgen AU 92 92 652" [label="perform 003-genline" fillcolor=lightblue style=filled]
	"testgen AU 68 3 653" [label="003-genline .
 
call 'csvgen_beginrow' using by value csvhandle returning bool" fillcolor=lightblue style=filled]
	"testgen PC 36 36 130" [label="if failure" fillcolor=lightblue style=filled]
	"testgen AU 53 53 654" [label="display 'Cannot begin row.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 655" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 78 78 656" [label="perform 002-genfield1" fillcolor=lightblue style=filled]
	"testgen AU 79 79 657" [label="perform 002-genfield2" fillcolor=lightblue style=filled]
	"testgen AU 81 11 658" [label="call 'csvgen_endrow' using by value csvhandle returning bool" fillcolor=lightblue style=filled]
	"testgen PC 74 74 131" [label="if failure" fillcolor=lightblue style=filled]
	"testgen AU 87 87 659" [label="display 'Cannot end row.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 660" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 56 6 661" [label="002-genfield2 .
 
string 'Bar,Baz' x'00' delimited by size into buffer
call 'csvgen_putfield' using by value csvhandle by reference buffer returning bool" fillcolor=lightblue style=filled]
	"testgen PC 64 64 132" [label="if failure" fillcolor=lightblue style=filled]
	"testgen AU 75 75 662" [label="display 'Cannot begin row.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 663" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 44 5 664" [label="002-genfield1 .
 
string 'Foo' x'00' delimited by size into buffer
call 'csvgen_putfield' using by value csvhandle by reference buffer returning bool" fillcolor=lightblue style=filled]
	"testgen PC 52 52 133" [label="if failure" fillcolor=lightblue style=filled]
	"testgen AU 65 65 665" [label="display 'Cannot begin row.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 666" [label="END-IF" fillcolor=lightblue style=filled]
	"testgen AU 40 40 667" [label="display 'Cannot create test.csv.'" fillcolor=lightblue style=filled]
	"testgen AU 0 0 649" -> "testgen AU 42 42 650" [label="sequential next"]
	"testgen AU 0 0 648" -> "testgen AU 0 0 649" [label="sequential next"]
	"testgen AU 37 37 647" -> "testgen AU 0 0 648" [label="sequential next"]
	"testgen PC 86 86 129" -> "testgen AU 37 37 647" [label=true]
	"testgen PC 86 86 129" -> "testgen AU 0 0 648" [label="outside-if"]
	"testgen AU 31 12 646" -> "testgen PC 86 86 129" [label="sequential next"]
	"testgen AU 29 29 645" -> "testgen AU 31 12 646" [label="perform-exit"]
	"testgen AU 0 0 660" -> "testgen AU 92 92 652" [label="sequential next"]
	"testgen AU 87 87 659" -> "testgen AU 0 0 660" [label="sequential next"]
	"testgen PC 74 74 131" -> "testgen AU 87 87 659" [label=true]
	"testgen PC 74 74 131" -> "testgen AU 0 0 660" [label="outside-if"]
	"testgen AU 81 11 658" -> "testgen PC 74 74 131" [label="sequential next"]
	"testgen AU 79 79 657" -> "testgen AU 81 11 658" [label="perform-exit"]
	"testgen AU 0 0 663" -> "testgen AU 79 79 657" [label="sequential next"]
	"testgen AU 75 75 662" -> "testgen AU 0 0 663" [label="sequential next"]
	"testgen PC 64 64 132" -> "testgen AU 75 75 662" [label=true]
	"testgen PC 64 64 132" -> "testgen AU 0 0 663" [label="outside-if"]
	"testgen AU 56 6 661" -> "testgen PC 64 64 132" [label="sequential next"]
	"testgen AU 79 79 657" -> "testgen AU 56 6 661" [label="procedure call"]
	"testgen AU 78 78 656" -> "testgen AU 79 79 657" [label="perform-exit"]
	"testgen AU 0 0 666" -> "testgen AU 78 78 656" [label="sequential next"]
	"testgen AU 65 65 665" -> "testgen AU 0 0 666" [label="sequential next"]
	"testgen PC 52 52 133" -> "testgen AU 65 65 665" [label=true]
	"testgen PC 52 52 133" -> "testgen AU 0 0 666" [label="outside-if"]
	"testgen AU 44 5 664" -> "testgen PC 52 52 133" [label="sequential next"]
	"testgen AU 78 78 656" -> "testgen AU 44 5 664" [label="procedure call"]
	"testgen AU 0 0 655" -> "testgen AU 78 78 656" [label="sequential next"]
	"testgen AU 53 53 654" -> "testgen AU 0 0 655" [label="sequential next"]
	"testgen PC 36 36 130" -> "testgen AU 53 53 654" [label=true]
	"testgen PC 36 36 130" -> "testgen AU 0 0 655" [label="outside-if"]
	"testgen AU 68 3 653" -> "testgen PC 36 36 130" [label="sequential next"]
	"testgen AU 92 92 652" -> "testgen AU 68 3 653" [label="procedure call"]
	"testgen AU 92 92 652" -> "testgen AU 29 29 645" [label="perform-exit"]
	"testgen AU 90 90 651" -> "testgen AU 92 92 652" [label="sequential next"]
	"testgen AU 29 29 645" -> "testgen AU 90 90 651" [label="procedure call"]
	"testgen PC 28 28 128" -> "testgen AU 29 29 645" [label=true]
	"testgen AU 40 40 667" -> "testgen AU 0 0 649" [label="sequential next"]
	"testgen PC 28 28 128" -> "testgen AU 40 40 667" [label=false]
	"testgen AU 20 2 644" -> "testgen PC 28 28 128" [label="sequential next"]
	"testgen AU 0 0 643" -> "testgen AU 20 2 644" [label=start]
}
